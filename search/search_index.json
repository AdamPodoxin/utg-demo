{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to UTG Demo","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#classes","title":"Classes","text":""},{"location":"#python","title":"Python:","text":"<p>PY302</p>"},{"location":"py302/","title":"PY302 Castle Clash","text":""},{"location":"py302/#day-2","title":"Day 2","text":""},{"location":"py302/#setting-animation","title":"Setting animation","text":"<p>Although we have our spawning card, we need to make the unit that will be created whenever we tap on the card.</p> <p>This unit should play an animation from a special type of sprite, a spritesheet! A sprite sheet is a group of images all together in one large image, like this:</p> <p></p> <ul> <li>Create a new class called <code>Unit</code></li> <li>Add a new sprite to your project<ul> <li>For our example, we will be using the Slime sprite. Name it <code>slimeUnit</code></li> </ul> </li> </ul> <p></p> <p>Have students consult the PixelPad documentation on animations.</p> <p>Ask students how we should set up a sprite sheet for <code>slimeUnit</code>? In particular, what numbers should go in the brackets and how do we know?</p> <p>We should first create the sprite sheet and slice it into smaller sprites. To slice it, we have to know how many rows and columns this sprite has.</p> <p>As you can see, our slime animation has 8 images. They are divided into 1 row and 8 columns. That\u2019s all the information we need from this sprite for now.</p> Unit - Start<pre><code>spriteSheet = sprite(\"slimeUnit.png\", 1, 8) # (1)\n</code></pre> <ol> <li>Here we are creating a new sprite sheet from our <code>slimeUnit.png</code> sprite. In our example, our sprite has 1 row and 8 columns.</li> </ol> <p>Direct students to the documentation again for the next step. Ensure they recognize this pattern.</p> <p>...</p> Unit - Start<pre><code>spriteSheet = sprite(\"slimeUnit.png\", 1, 8)\nanim = new_animation(spriteSheet, 20, 0, 7)\nanimation_set(self, anim)\n</code></pre> <p>...</p>"},{"location":"py302/#flipping-objects-horizontally","title":"Flipping objects horizontally","text":"<p>Right now, our <code>Unit</code> object and <code>Card</code> objects are facing the wrong way. We can use <code>scaleX = -1</code> to flip these objects across the y axis. </p> <p>Ask students what class this code should go in? - The <code>Unit</code> and <code>Card</code> classes, in the <code>Start</code> tab so that it just happens once at the beginning.</p> <p>Ask students how we will ensure that this affects objects within this class - <code>self</code> keyword.</p> Card - Start<pre><code>self.sprite = sprite(\"slimeCard.png\")\nself.scaleX = -1 # (1)\n</code></pre> <ol> <li>Objects within this class are flipped across the y axis.</li> </ol> Unit - Start<pre><code>spriteSheet = sprite(\"slimeUnit.png\", 1, 8)\nanim = new_animation(spriteSheet, 20, 0, 7)\nanimation_set(self, anim)\nself.scaleX = -1 # (1)\n</code></pre> <ol> <li>Objects within this class are flipped across the y axis.</li> </ol>"},{"location":"py302/#day-3","title":"Day 3","text":""},{"location":"py302/#section","title":"Section","text":"<p>Content here...</p>"}]}